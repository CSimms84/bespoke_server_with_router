name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Cache CMake and pip (Linux and macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cmake
          ~/.cache/pip
          build
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cmake-
          ${{ runner.os }}-

    - name: Cache CMake and Chocolatey (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v4
      with:
        path: |
          C:\ProgramData\chocolatey\lib
          ~/.cmake
          build
        key: windows-cmake-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          windows-cmake-
          windows-

    - name: Install dependencies on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update || true
        sudo apt-get install -y cmake libcunit1 libcunit1-doc libcunit1-dev libpcap-dev

    - name: Install dependencies on macOS
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake libpcap cunit

    - name: Install dependencies on Windows
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --yes

    - name: Ensure clean build directory
      run: rm -rf build

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake
      run: cmake -S . -B build
      working-directory: .

    - name: Build
      run: cmake --build build --parallel
      working-directory: .

    - name: Run tests
      run: ctest --output-on-failure
      working-directory: build
